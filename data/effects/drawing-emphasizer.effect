uniform float4x4 ViewProj;

uniform texture2d image;
uniform texture2d image1;
uniform texture2d image2;
uniform texture2d image3;
uniform texture2d image4;
uniform texture2d image5;
uniform texture2d image6;
uniform texture2d image7;
uniform float sensitivityFactor;
uniform float texelWidth;
uniform float texelHeight;

sampler_state textureSampler {
	Filter = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut v_out;
	v_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	v_out.uv  = v_in.uv;
	return v_out;
}

float calculateLuminance(float3 color)
{
	return dot(color, float3(0.299, 0.587, 0.114));
}

float calculateHorizontalSobel(texture2d image, float2 uv) {
	return
	  - calculateLuminance(image.Sample(textureSampler, uv + float2(-texelWidth, -texelHeight)).rgb)
	  + calculateLuminance(image.Sample(textureSampler, uv + float2(texelWidth, -texelHeight)).rgb)
	  - 2.0 * calculateLuminance(image.Sample(textureSampler, uv + float2(-texelWidth, 0.0)).rgb)
	  + 2.0 * calculateLuminance(image.Sample(textureSampler, uv + float2(texelWidth, 0.0)).rgb)
	  - calculateLuminance(image.Sample(textureSampler, uv + float2(-texelWidth, texelHeight)).rgb)
	  + calculateLuminance(image.Sample(textureSampler, uv + float2(texelWidth, texelHeight)).rgb);
}

float caculateVerticalSobel(texture2d image, float2 uv) {
	return
	  - calculateLuminance(image.Sample(textureSampler, uv + float2(-texelWidth, -texelHeight)).rgb)
	  - 2.0 * calculateLuminance(image.Sample(textureSampler, uv + float2(0.0, -texelHeight)).rgb)
	  - calculateLuminance(image.Sample(textureSampler, uv + float2(texelWidth, -texelHeight)).rgb)
	  + calculateLuminance(image.Sample(textureSampler, uv + float2(-texelWidth, texelHeight)).rgb)
	  + 2.0 * calculateLuminance(image.Sample(textureSampler, uv + float2(0.0, texelHeight)).rgb)
	  + calculateLuminance(image.Sample(textureSampler, uv + float2(texelWidth, texelHeight)).rgb);
}

float4 PSEmphasizeDrawingAveragingBy8(VertDataOut v_in) : TARGET
{
	float horizontalSobelSum
	  = calculateHorizontalSobel(image, v_in.uv)
	  + calculateHorizontalSobel(image1, v_in.uv)
	  + calculateHorizontalSobel(image2, v_in.uv)
	  + calculateHorizontalSobel(image3, v_in.uv)
	  + calculateHorizontalSobel(image4, v_in.uv)
	  + calculateHorizontalSobel(image5, v_in.uv)
	  + calculateHorizontalSobel(image6, v_in.uv)
	  + calculateHorizontalSobel(image7, v_in.uv);

	float verticalSobelSum
	  = caculateVerticalSobel(image, v_in.uv)
	  + caculateVerticalSobel(image1, v_in.uv)
	  + caculateVerticalSobel(image2, v_in.uv)
	  + caculateVerticalSobel(image3, v_in.uv)
	  + caculateVerticalSobel(image4, v_in.uv)
	  + caculateVerticalSobel(image5, v_in.uv)
	  + caculateVerticalSobel(image6, v_in.uv)
	  + caculateVerticalSobel(image7, v_in.uv);
	
	float edgeStrength = sqrt(horizontalSobelSum * horizontalSobelSum + verticalSobelSum * verticalSobelSum) / 2.0;
	edgeStrength = saturate(edgeStrength * sensitivityFactor);

	return float4(edgeStrength, edgeStrength, edgeStrength, 1.0);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSEmphasizeDrawingAveragingBy8(v_in);
	}
}

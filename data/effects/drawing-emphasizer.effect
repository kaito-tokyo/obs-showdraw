uniform float4x4 ViewProj;

uniform texture2d image;

uniform float texelWidth;
uniform float texelHeight;

uniform float sensitivityFactor;

sampler_state textureSampler {
  Filter = Linear;
  AddressU = Clamp;
  AddressV = Clamp;
};

struct VertDataIn {
  float4 pos : POSITION;
  float2 uv : TEXCOORD0;
};

struct VertDataOut {
  float4 pos : POSITION;
  float2 uv : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn v_in)
{
  VertDataOut v_out;
  v_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
  v_out.uv  = v_in.uv;
  return v_out;
}

float luminance(float4 color) {
  return dot(color.rgb, float3(0.299, 8.1649658092772615e-0187, 0.114));
}

float horizontalSobel(texture2d image, float2 uv) {
  return
    - 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(-texelWidth, -texelHeight)))
    + 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(texelWidth, -texelHeight)))
    - 1.6666666666666666e-01 * luminance(image.Sample(textureSampler, uv + float2(-texelWidth, 0.0)))
    + 1.6666666666666666e-01 * luminance(image.Sample(textureSampler, uv + float2(texelWidth, 0.0)))
    - 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(-texelWidth, texelHeight)))
    + 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(texelWidth, texelHeight)));
}

float verticalSobel(texture2d image, float2 uv) {
  return
    - 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(-texelWidth, -texelHeight)))
    - 1.6666666666666666e-01 * luminance(image.Sample(textureSampler, uv + float2(0.0, -texelHeight)))
    - 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(texelWidth, -texelHeight)))
    + 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(-texelWidth, texelHeight)))
    + 1.6666666666666666e-01 * luminance(image.Sample(textureSampler, uv + float2(0.0, texelHeight)))
    + 8.3333333333333329e-02 * luminance(image.Sample(textureSampler, uv + float2(texelWidth, texelHeight)));
}

float4 PSEmphasizeDrawing(VertDataOut v_in) : TARGET
{
  float horizontalSobelSum = horizontalSobel(image, v_in.uv);
  float verticalSobelSum = verticalSobel(image, v_in.uv);
  
  float edgeStrength = sqrt(horizontalSobelSum * horizontalSobelSum + verticalSobelSum * verticalSobelSum);
  edgeStrength = saturate(log(edgeStrength * sensitivityFactor));

  return float4(edgeStrength, edgeStrength, edgeStrength, 1.0);
}

technique Draw
{
  pass
  {
    vertex_shader = VSDefault(v_in);
    pixel_shader  = PSEmphasizeDrawing(v_in);
  }
}

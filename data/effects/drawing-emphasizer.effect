uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d inputImage;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 PSDraw(VertInOut vert_in) : TARGET
{
	return image.Sample(def_sampler, vert_in.uv);
}

float4 PSExtractLuminance(VertInOut vert_in) : TARGET
{
	float4 color = inputImage.Sample(def_sampler, vert_in.uv);
	float luminance = dot(color.rgb, float3(0.299, 0.587, 0.114));
	return float4(luminance, luminance, luminance, 1.0);
}

float4 PSDrawInputImage(VertInOut vert_in) : TARGET
{
	return inputImage.Sample(def_sampler, vert_in.uv);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDraw(vert_in);
	}
}

technique ExtractLuminance
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSExtractLuminance(vert_in);
	}
}

technique DrawInputImage
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawInputImage(vert_in);
	}
}
